# Kubernetes Application Command Line Arguments Best Practices Examples

---
# 1. Using ConfigMap + Environment Variables (Recommended)
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  DATABASE_URL: "postgresql://localhost:5432/mydb"
  REDIS_URL: "redis://localhost:6379"
  LOG_LEVEL: "info"
  API_PORT: "8080"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment
spec:
  template:
    spec:
      containers:
      - name: app
        image: myapp:latest
        env:
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: REDIS_URL
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: LOG_LEVEL
        - name: API_PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: API_PORT

---
# 2. Using ConfigMap + Command Line Arguments
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-args-config
data:
  args.yaml: |
    database:
      url: "postgresql://localhost:5432/mydb"
    redis:
      url: "redis://localhost:6379"
    logging:
      level: "info"
    server:
      port: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment-args
spec:
  template:
    spec:
      containers:
      - name: app
        image: myapp:latest
        command: ["/app/myapp"]
        args:
        - "--config=/etc/app/config/args.yaml"
        - "--log-level=info"
        - "--port=8080"
        volumeMounts:
        - name: config-volume
          mountPath: /etc/app/config
      volumes:
      - name: config-volume
        configMap:
          name: app-args-config

---
# 3. Using Environment Variables + Command Line Arguments Hybrid
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment-hybrid
spec:
  template:
    spec:
      containers:
      - name: app
        image: myapp:latest
        command: ["/app/myapp"]
        args:
        - "--config=/etc/app/config/app.yaml"
        - "--log-level=$(LOG_LEVEL)"
        - "--port=$(API_PORT)"
        env:
        - name: LOG_LEVEL
          value: "info"
        - name: API_PORT
          value: "8080"
        - name: DATABASE_URL
          value: "postgresql://localhost:5432/mydb"
        volumeMounts:
        - name: config-volume
          mountPath: /etc/app/config
      volumes:
      - name: config-volume
        configMap:
          name: app-config

---
# 4. Using Secret for Sensitive Data
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
type: Opaque
data:
  database-password: cGFzc3dvcmQ=  # base64 encoded "password"
  api-key: c2VjcmV0LWtleQ==       # base64 encoded "secret-key"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment-secrets
spec:
  template:
    spec:
      containers:
      - name: app
        image: myapp:latest
        env:
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: database-password
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: api-key

---
# 5. Using ConfigMap with YAML Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-yaml-config
data:
  app.yaml: |
    database:
      host: "localhost"
      port: 5432
      name: "mydb"
      ssl: true
    redis:
      host: "localhost"
      port: 6379
      db: 0
    logging:
      level: "info"
      format: "json"
    server:
      port: 8080
      timeout: 30s
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment-yaml
spec:
  template:
    spec:
      containers:
      - name: app
        image: myapp:latest
        args:
        - "--config=/etc/app/config/app.yaml"
        volumeMounts:
        - name: config-volume
          mountPath: /etc/app/config
      volumes:
      - name: config-volume
        configMap:
          name: app-yaml-config

---
# 6. Using Environment Variables with Default Values
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment-defaults
spec:
  template:
    spec:
      containers:
      - name: app
        image: myapp:latest
        env:
        - name: LOG_LEVEL
          value: "info"
        - name: API_PORT
          value: "8080"
        - name: DATABASE_URL
          value: "postgresql://localhost:5432/mydb"
        - name: REDIS_URL
          value: "redis://localhost:6379"
        - name: ENABLE_METRICS
          value: "true"
        - name: METRICS_PORT
          value: "9090"

---
# 7. Using ConfigMap with Multiple Configuration Files
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-multi-config
data:
  main.yaml: |
    app:
      name: "myapp"
      version: "1.0.0"
  database.yaml: |
    database:
      host: "localhost"
      port: 5432
      name: "mydb"
  logging.yaml: |
    logging:
      level: "info"
      format: "json"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment-multi
spec:
  template:
    spec:
      containers:
      - name: app
        image: myapp:latest
        args:
        - "--config=/etc/app/config/main.yaml"
        - "--db-config=/etc/app/config/database.yaml"
        - "--log-config=/etc/app/config/logging.yaml"
        volumeMounts:
        - name: config-volume
          mountPath: /etc/app/config
      volumes:
      - name: config-volume
        configMap:
          name: app-multi-config

---
# 8. Using ConfigMap with Template Variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-template-config
data:
  app.conf: |
    [database]
    host = {{ .Values.database.host }}
    port = {{ .Values.database.port }}
    name = {{ .Values.database.name }}
    
    [redis]
    host = {{ .Values.redis.host }}
    port = {{ .Values.redis.port }}
    
    [server]
    port = {{ .Values.server.port }}
    timeout = {{ .Values.server.timeout }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment-template
spec:
  template:
    spec:
      containers:
      - name: app
        image: myapp:latest
        args:
        - "--config=/etc/app/config/app.conf"
        volumeMounts:
        - name: config-volume
          mountPath: /etc/app/config
      volumes:
      - name: config-volume
        configMap:
          name: app-template-config

---
# 9. Using ConfigMap with JSON Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-json-config
data:
  config.json: |
    {
      "database": {
        "host": "localhost",
        "port": 5432,
        "name": "mydb"
      },
      "redis": {
        "host": "localhost",
        "port": 6379
      },
      "logging": {
        "level": "info",
        "format": "json"
      },
      "server": {
        "port": 8080,
        "timeout": "30s"
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment-json
spec:
  template:
    spec:
      containers:
      - name: app
        image: myapp:latest
        args:
        - "--config=/etc/app/config/config.json"
        volumeMounts:
        - name: config-volume
          mountPath: /etc/app/config
      volumes:
      - name: config-volume
        configMap:
          name: app-json-config

---
# 10. Using ConfigMap with Environment-Specific Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-env-config
data:
  development.yaml: |
    database:
      host: "localhost"
      port: 5432
      name: "mydb_dev"
    logging:
      level: "debug"
  production.yaml: |
    database:
      host: "prod-db.example.com"
      port: 5432
      name: "mydb_prod"
    logging:
      level: "warn"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment-env
spec:
  template:
    spec:
      containers:
      - name: app
        image: myapp:latest
        args:
        - "--config=/etc/app/config/$(ENVIRONMENT).yaml"
        env:
        - name: ENVIRONMENT
          value: "development"
        volumeMounts:
        - name: config-volume
          mountPath: /etc/app/config
      volumes:
      - name: config-volume
        configMap:
          name: app-env-config 