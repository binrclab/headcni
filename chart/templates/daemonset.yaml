apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "headcni.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "headcni.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "headcni.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "headcni.selectorLabels" . | nindent 8 }}
    spec:
      # Use host network mode, CNI plugin needs direct access to host network
      hostNetwork: true
      # Use host PID namespace for process management
      hostPID: true
      serviceAccountName: {{ include "headcni.serviceAccountName" . }}
      # Set restart policy
      restartPolicy: Always
      # Termination grace period
      terminationGracePeriodSeconds: 30
      initContainers:
      - name: setup-headcni
        image: "{{ .Values.image.repository }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
        - /bin/sh
        - -c
        - |
          # 1. Install necessary CNI binaries to host
          cp /opt/cni/bin/headcni /host/opt/cni/bin/
          cp /opt/cni/bin/headcni-ipam /host/opt/cni/bin/
          chmod +x /host/opt/cni/bin/headcni
          chmod +x /host/opt/cni/bin/headcni-ipam
          
          # 2. Prepare configuration in container
          mkdir -p /tmp/headcni/config
          mkdir -p /tmp/headcni/templates
          
          # Copy template files
          cp /etc/headcni/headcni-daemon.env /tmp/headcni/config/
          
          # Create configuration file
          cat > /tmp/headcni/config/daemon.yaml <<EOF
          daemon:
            logLevel: info
            hostNetwork: true
            metrics:
              enabled: {{ .Values.config.monitoring.enabled }}
              port: {{ .Values.config.monitoring.port }}
              path: {{ .Values.config.monitoring.path }}
          
          network:
            podCIDR:
              base: {{ .Values.config.network.podCIDR }}
              perNode: "/24"
            serviceCIDR: {{ .Values.config.network.serviceCIDR }}
            mtu: {{ .Values.config.network.mtu }}
            enableIPv6: {{ .Values.config.network.enableIPv6 }}
            enableNetworkPolicy: {{ .Values.config.network.enableNetworkPolicy }}
          
          ipam:
            type: {{ .Values.config.ipam.type }}
            strategy: {{ .Values.config.ipam.strategy }}
            gcInterval: {{ .Values.config.ipam.gcInterval }}
          
          headscale:
            url: {{ .Values.config.headscale.url }}
            authKey: ""
          
          tailscale:
            mode: {{ .Values.config.tailscale.mode }}
            url: {{ .Values.config.tailscale.url }}
            socket:
              path: {{ .Values.config.tailscale.socket.path }}
              name: {{ .Values.config.tailscale.socket.name }}
            hostname:
              prefix: {{ .Values.config.tailscale.hostname.prefix }}
              type: {{ .Values.config.tailscale.hostname.type }}
            mtu: {{ .Values.config.tailscale.mtu }}
            acceptDNS: {{ .Values.config.tailscale.acceptDNS }}
            user: {{ .Values.config.tailscale.user }}
            tags:
          {{- range .Values.config.tailscale.tags }}
            - {{ . }}
          {{- end }}
          
          dns:
            magicDNS:
              enabled: {{ .Values.config.dns.magicDNS.enabled }}
              nameservers:
          {{- range .Values.config.dns.magicDNS.nameservers }}
              - {{ . }}
          {{- end }}
              searchDomains:
          {{- range .Values.config.dns.magicDNS.searchDomains }}
              - {{ . }}
          {{- end }}
              options:
          {{- range .Values.config.dns.magicDNS.options }}
              - {{ . }}
          {{- end }}
          EOF
          
          echo "HeadCNI setup completed"
        volumeMounts:
        - name: host-cni-bin
          mountPath: /host/opt/cni/bin
        - name: headcni-config
          mountPath: /etc/headcni
        - name: shared-config
          mountPath: /tmp/headcni
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
          privileged: true
      containers:
      - name: headcni-daemon
        image: "{{ .Values.image.repository }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
        - /opt/cni/bin/headcni-daemon
        - --config=/tmp/headcni/config/daemon.yaml
        - --log-level=info
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        # Pod CIDR can be injected via environment variable or obtained via Kubernetes API
        - name: POD_CIDR
          value: "{{ .Values.config.network.podCIDR | default "" }}"
        - name: SERVICE_CIDR
          value: "{{ .Values.config.network.serviceCIDR | default "" }}"

        {{- if .Values.config.headscale.authKey }}
        - name: HEADSCALE_AUTH_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "headcni.fullname" . }}-auth
              key: auth-key
        {{- end }}
        securityContext:
          # CNI plugin needs privileged access to configure the network
          privileged: true
          capabilities:
            add:
            - NET_ADMIN      # Network management permissions
            - SYS_ADMIN      # System management permissions (for network configuration)
            - NET_RAW        # Raw network access permissions
          allowPrivilegeEscalation: true
          readOnlyRootFilesystem: false
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
        # CNI configuration directory - writable
        - name: cni-conf
          mountPath: /etc/cni/net.d
          readOnly: false
        # HeadCNI configuration - read-only
        - name: headcni-config
          mountPath: /etc/headcni
          readOnly: true
        # Temporary configuration directory
        - name: shared-config
          mountPath: /tmp/headcni
        # Tailscale runtime directory
        - name: tailscale-runtime
          mountPath: /var/run/tailscale
        # Tailscale data directory
        - name: tailscale-data
          mountPath: /var/lib/tailscale
        # HeadCNI runtime data
        - name: headcni-runtime
          mountPath: /var/run/headcni
        # HeadCNI persistent data
        - name: headcni-data
          mountPath: /var/lib/headcni
        {{- if .Values.config.monitoring.enabled }}
        ports:
        - name: metrics
          containerPort: {{ .Values.config.monitoring.port }}
          protocol: TCP
        {{- end }}
        resources:
          {{- toYaml .Values.resources.manager | nindent 10 }}
        {{- if .Values.config.monitoring.enabled }}
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.config.monitoring.port }}
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: {{ .Values.config.monitoring.port }}
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        {{- end }}
      volumes:
      # CNI configuration directory
      - name: cni-conf
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
      # HeadCNI configuration file
      - name: headcni-config
        configMap:
          name: {{ include "headcni.fullname" . }}-config
      # Temporary configuration directory
      - name: shared-config
        emptyDir: {}
      # Host CNI binary directory
      - name: host-cni-bin
        hostPath:
          path: /opt/cni/bin
          type: Directory
      # Tailscale runtime directory
      - name: tailscale-runtime
        hostPath:
          path: /var/run/tailscale
          type: DirectoryOrCreate
      # Tailscale data directory
      - name: tailscale-data
        hostPath:
          path: /var/lib/tailscale
          type: DirectoryOrCreate
      # HeadCNI runtime directory
      - name: headcni-runtime
        hostPath:
          path: /var/run/headcni
          type: DirectoryOrCreate
      # HeadCNI persistent data directory
      - name: headcni-data
        hostPath:
          path: /var/lib/headcni
          type: DirectoryOrCreate
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }} 